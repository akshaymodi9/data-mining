import os

import numpy as np
import pandas as pd
from sklearn.cluster import KMeans, DBSCAN
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler



#directory name of the output file
dirname = 'output'

# color dictionary for mapping of colors to cluster number in matplotlib figure
color_dict = {-1:'pink',0:'r',1:'g',2:'b',3:'orange',4:'black',5:'purple',6:'violet'}

""" Answer to Question 1 """

#read the csv file
data = pd.read_csv('./specs/question_1.csv')

# using Kmeans to create 3 clusters
kmeans = KMeans(n_clusters=3, random_state=0).fit(data)

# Add the output generated by kmeans to dataframe
data['cluster'] = kmeans.labels_


# check if the output folder is present, if not create output folder
if not os.path.exists(dirname):
    os.mkdir(dirname)

# write a output csv file
data.to_csv('./output/question_1.csv',index=False)

# set the colors for cluster number using the color dictionary
colors = [color_dict[l] for l in data['cluster']]

# uniq = list(set(data['cluster']))
# clusters =[]
# for i in uniq:
#     clusters.append('cluster' + str(i))

# print(uniq,clusters)

# generate a scatter plot
plt.scatter(data['x'],data['y'] ,c=colors)
plt.xlabel('x')
plt.ylabel('y')

# save the plot as pdf file
plt.savefig('./output/question_1.pdf')



""" Answer to Question 2 """

#read the csv file
data = pd.read_csv('./specs/question_2.csv')

# remove the columns that are not required 
data.pop('NAME')
data.pop('MANUF')
data.pop('TYPE')
data.pop('RATING')

# kmeans for 5 clusters,n_init=5
kmeans_5 = KMeans(n_clusters=5, random_state=0,n_init=5,max_iter=100).fit(data)

# save the ouput ot dataframe
data['config1'] = kmeans_5.labels_

# kmeans for 5 clusters, n_init=100
kmeans_runs = KMeans(n_clusters=5, random_state=0,n_init=100,max_iter=100).fit(data)

# save the ouput ot dataframe
data['config2'] = kmeans_runs.labels_

# kmeans for 3 clusters
kmeans_3 = KMeans(n_clusters=3, random_state=0).fit(data)

# save the ouput ot dataframe
data['config3'] = kmeans_3.labels_

# write a output csv file
data.to_csv('./output/question_2.csv',index=False)



""" Answer to Question 3 """

#read the csv file
data = pd.read_csv('./specs/question_3.csv')

# remove the ID column
data.pop('ID')

# applying kmeans for 7 clusters
kmeans = KMeans(n_clusters=7,random_state=0,n_init=5,max_iter=100).fit(data)

#save the output to dataframe
data['kmeans'] = kmeans.labels_

# mapping of colors accoring to cluster number from color dictionary
colors = [color_dict[l] for l in data['kmeans']]

# generate a scatter plot
plt.clf()
plt.scatter(data['x'],data['y'] ,c=colors)
plt.xlabel('x')
plt.ylabel('y')

# save the plot as pdf file
plt.savefig('./output/question_3_1.pdf')

# normalize the x and y attribute using min-max normalization
scaler = MinMaxScaler()
new_data = pd.DataFrame()
new_data['x'] = data['x']
new_data['y'] = data['y']

scaler.fit(new_data)
new_data_1 = scaler.transform(new_data)

# applying DBSCAN to generate clusters with eps=0.04
clustering = DBSCAN(eps=0.04, min_samples=4).fit(new_data_1)

# saving the ouput in dataframe
data['dbscan1'] = clustering.labels_

# mapping of colors with clusters from color dictionary
colors = [color_dict[l] for l in data['dbscan1']]

# generate a scatter plot
plt.clf()
plt.scatter(list(list(zip(*new_data_1))[0]) ,list(list(zip(*new_data_1))[1]) ,c=colors)
plt.xlabel('x')
plt.ylabel('y')

# save the plot as pdf file
plt.savefig('./output/question_3_2.pdf')

# applying DBSCAN to generate clusters with eps=0.08
clustering = DBSCAN(eps=0.08, min_samples=4).fit(new_data_1)

# saving the output to dataframe
data['dbscan2'] = clustering.labels_

# mapping of colors with clusters from color dictionary
colors = [color_dict[l] for l in data['dbscan2']]

# generate a scatter plot
plt.clf()
plt.scatter(list(list(zip(*new_data_1))[0]) ,list(list(zip(*new_data_1))[1]) ,c=colors)
plt.xlabel('x')
plt.ylabel('y')

# save the plot as pdf file
plt.savefig('./output/question_3_3.pdf')

# write to output csv file
data.to_csv('./output/question_3.csv',index=False)